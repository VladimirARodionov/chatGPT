# Use an official Python runtime as the base image
FROM python:3.13-slim-bullseye

# Install apt packages
RUN apt-get update && \
    apt-get install -y \
    git \
    ffmpeg \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV ENVIRONMENT=PRODUCTION
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Создаем пользователя для запуска приложения
RUN addgroup --system app && \
    adduser --system app --ingroup app

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем только файлы зависимостей сначала для кэширования
COPY --chown=app:app requirements.txt .

# Создаем виртуальное окружение в папке app
RUN python -m venv venv
ENV PATH="/app/venv/bin:$PATH"

# Устанавливаем зависимости в виртуальной среде
RUN . /app/venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -r requirements.txt

# Создаем и настраиваем директории для данных с правильными правами
RUN mkdir -p /app/logs /app/temp_audio /app/transcriptions /app/whisper_models && \
    chown -R app:app /app && \
    chmod -R 755 /app/logs /app/temp_audio /app/transcriptions /app/whisper_models

# Копируем остальные файлы приложения
COPY --chown=app:app . .

# Проверяем соединение с Local API Server перед запуском
COPY --chown=app:app docker-healthcheck.sh /app/docker-healthcheck.sh
RUN chmod +x /app/docker-healthcheck.sh
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD ["./docker-healthcheck.sh"]

RUN usermod -a -G root app
RUN usermod -a -G sudo app
# Переключаемся на пользователя app
USER app:app

# Запускаем приложение с помощью Python из виртуальной среды
CMD ["python", "bot.py"]