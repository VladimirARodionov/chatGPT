import logging.config
import asyncio
import pathlib
import os

from alembic import command
from alembic.config import Config
from dotenv import load_dotenv
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import BotCommand, BotCommandScopeDefault, ReplyKeyboardRemove
from openai import OpenAI

from audio_service import background_worker_running, thread_executor, \
    handle_audio_service, \
    background_audio_processor, init_monitoring, cancel_audio_processing
from create_bot import env_config, bot, WHISPER_MODEL, WHISPER_MODELS_DIR, MAX_MESSAGE_LENGTH, \
    USE_LOCAL_WHISPER
from db_service import get_cmd_status, check_message_limit, get_all_from_queue, reset_active_tasks
from files_service import cleanup_temp_files, split_text_into_chunks
from audio_utils import list_downloaded_models

dp = Dispatcher()
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
alembic_cfg = Config("alembic.ini")
alembic_cfg.attributes['configure_logger'] = False
command.upgrade(alembic_cfg, "head")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig(fname=pathlib.Path(__file__).resolve().parent / 'logging.ini',
                          disable_existing_loggers=False)
logging.getLogger('aiogram.dispatcher').propagate = False
logging.getLogger('aiogram.event').propagate = False

logger = logging.getLogger(__name__)


# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
BOT_COMMANDS = [
    BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"),
    BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"),
    BotCommand(command="models", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper"),
    BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"),
    BotCommand(command="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á"),
]


async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    await bot.set_my_commands(BOT_COMMANDS, scope=BotCommandScopeDefault())


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
    , reply_markup=ReplyKeyboardRemove())

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    await get_cmd_status(message)

@dp.message(Command("models"))
async def cmd_models(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper"""
    try:
        models = list_downloaded_models()
        
        if not models:
            await message.answer("–ù–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper. –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–∫–∞—á–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        models_text = "üìö –°–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ Whisper:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grouped_models = {}
        for model in models:
            name = model['name']
            if name not in grouped_models:
                grouped_models[name] = []
            grouped_models[name].append(model)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        for name, model_variants in grouped_models.items():
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é/–ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            latest_model = max(model_variants, key=lambda m: m.get('file_size_mb', m.get('size_mb', 0)))
            size_mb = latest_model.get('size_mb', 0)
            
            if len(model_variants) > 1:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
                variant_info = ", ".join([os.path.basename(m['path']) for m in model_variants])
                models_text += f"‚Ä¢ {name} ({size_mb} MB) - {variant_info}\n"
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                file_path = os.path.basename(latest_model['path'])
                models_text += f"‚Ä¢ {name} ({size_mb} MB) - {file_path}\n"
        
        models_text += f"\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {WHISPER_MODEL}"
        models_text += f"\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {WHISPER_MODELS_DIR}"
        
        await message.answer(models_text)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")

@dp.message(Command("queue"))
async def cmd_queue(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    all_tasks = get_all_from_queue()

    if not all_tasks:
        await message.answer("üü¢ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏
    queue_info = f"üìã <b>–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:</b>\n\n"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    active_tasks = [task for task in all_tasks if task.is_active]
    waiting_tasks = [task for task in all_tasks if not task.is_active]

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    if active_tasks:
        queue_info += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(active_tasks)}):</b>\n"
        for task in active_tasks:
            file_name = task.file_name or os.path.basename(task.file_path)

            queue_info += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{task.user_id}</code>{" (–Ø)" if user_id == task.user_id else ""}, ‚ñ∂Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n"
            queue_info += f"  –§–∞–π–ª: {file_name} ({task.file_size_mb:.2f} –ú–ë)\n"

        queue_info += "\n"

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if waiting_tasks:
        queue_info += f"‚è≥ <b>–í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è ({len(waiting_tasks)}):</b>\n"
        
        for i, task in enumerate(waiting_tasks, 1):
            file_name = task.file_name or os.path.basename(task.file_path)

            queue_info += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{task.user_id}</code>{" (–Ø)" if user_id == task.user_id else ""}, –§–∞–π–ª: {file_name} ({task.file_size_mb:.2f} –ú–ë)\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    queue_info += f"\nüñ• <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    queue_info += f"- –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {'–†–∞–±–æ—Ç–∞–µ—Ç' if background_worker_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
    queue_info += f"- –†–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤: {thread_executor._max_workers}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await message.answer(queue_info, parse_mode="HTML")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ) –¥–ª—è –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π
‚Ä¢ –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (SRT) —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö
‚Ä¢ –õ–∏–º–∏—Ç: 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
/models - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
/queue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
‚Ä¢ –†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
"""
    transcribe_mode = "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Whisper" if USE_LOCAL_WHISPER else "OpenAI API"
    await message.answer(help_text % (WHISPER_MODEL, transcribe_mode), parse_mode="HTML")

@dp.message(lambda message: message.text == "üí¨ –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def button_status(message: types.Message):
    await cmd_status(message)

@dp.message(lambda message: message.text == "üé§ –ú–æ–¥–µ–ª–∏ Whisper")
async def button_models(message: types.Message):
    await cmd_models(message)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def button_about(message: types.Message):
    about_text = """
<b>üì± ChatGPT –ë–æ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Whisper.

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ OpenAI ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (SRT) –ø–æ —Ç–∞–π–º–∫–æ–¥–∞–º
‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏
"""
    await message.answer(about_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "üîç –û—á–µ—Ä–µ–¥—å")
async def button_queue(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—á–µ—Ä–µ–¥—å'"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /queue
    await cmd_queue(message)


@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    result, msg = cancel_audio_processing(user_id)
    await message.answer(msg)

@dp.message(lambda message: message.voice or message.audio)
async def handle_audio(message: types.Message):
    await handle_audio_service(message)


@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    if not check_message_limit(user_id):
        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        client = OpenAI(api_key=env_config.get('OPEN_AI_TOKEN'),
                        max_retries=3,
                        timeout=30
                        )
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = client.chat.completions.create(
            model=env_config.get('MODEL'),
            messages=[
                {"role": "user", "content": message.text}
            ]
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = response.choices[0].message.content
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(response_text) > MAX_MESSAGE_LENGTH:
            chunks = split_text_into_chunks(response_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(chunks[0])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            for chunk in chunks[1:]:
                await message.answer(chunk)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.edit_text(response_text)
        
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def main():
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    try:
        logger.info(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Whisper: {WHISPER_MODEL}')
        logger.info(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π Whisper: {WHISPER_MODELS_DIR}')
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        reset_count = reset_active_tasks()
        if reset_count > 0:
            logger.info(f'–°–±—Ä–æ—à–µ–Ω–æ {reset_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞')
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files(older_than_hours=24)
        logger.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
        background_task = asyncio.create_task(background_audio_processor())
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await asyncio.sleep(2)
        logger.info('–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        init_monitoring()
        logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
        await set_commands()
        logger.info('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')

        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏...')
        # –î–∞–µ–º –≤—Ä–µ–º—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
        await asyncio.sleep(1)
    finally:
        await bot.session.close()
        logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except asyncio.CancelledError:
        logger.info('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except Exception:
        logger.exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
