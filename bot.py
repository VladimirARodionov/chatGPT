import logging.config
import asyncio
import pathlib
import os
import json
import time
import signal

from alembic import command
from alembic.config import Config
from dotenv import load_dotenv
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import BotCommand, BotCommandScopeDefault, ReplyKeyboardRemove
from openai import OpenAI

import audio_service
from create_bot import env_config, bot, WHISPER_MODEL, WHISPER_MODELS_DIR, MAX_MESSAGE_LENGTH, \
    USE_LOCAL_WHISPER
from db_service import get_cmd_status, check_message_limit
from files_service import cleanup_temp_files
from audio_utils import list_downloaded_models

dp = Dispatcher()
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
alembic_cfg = Config("alembic.ini")
alembic_cfg.attributes['configure_logger'] = False
command.upgrade(alembic_cfg, "head")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig(fname=pathlib.Path(__file__).resolve().parent / 'logging.ini',
                          disable_existing_loggers=False)
logging.getLogger('aiogram.dispatcher').propagate = False
logging.getLogger('aiogram.event').propagate = False

logger = logging.getLogger(__name__)


# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
BOT_COMMANDS = [
    BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"),
    BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"),
    BotCommand(command="models", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper"),
    BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"),
    BotCommand(command="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á"),
]


# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
QUEUE_DIR = "queue"
QUEUE_SAVE_PATH = os.path.join(QUEUE_DIR, "saved_queue.json")

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    await bot.set_my_commands(BOT_COMMANDS, scope=BotCommandScopeDefault())


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
    , reply_markup=ReplyKeyboardRemove())

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    await get_cmd_status(message)

@dp.message(Command("models"))
async def cmd_models(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper"""
    try:
        models = list_downloaded_models()
        
        if not models:
            await message.answer("–ù–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper. –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–∫–∞—á–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        models_text = "üìö –°–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ Whisper:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grouped_models = {}
        for model in models:
            name = model['name']
            if name not in grouped_models:
                grouped_models[name] = []
            grouped_models[name].append(model)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        for name, model_variants in grouped_models.items():
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é/–ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            latest_model = max(model_variants, key=lambda m: m.get('file_size_mb', m.get('size_mb', 0)))
            size_mb = latest_model.get('size_mb', 0)
            
            if len(model_variants) > 1:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
                variant_info = ", ".join([os.path.basename(m['path']) for m in model_variants])
                models_text += f"‚Ä¢ {name} ({size_mb} MB) - {variant_info}\n"
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                file_path = os.path.basename(latest_model['path'])
                models_text += f"‚Ä¢ {name} ({size_mb} MB) - {file_path}\n"
        
        models_text += f"\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {WHISPER_MODEL}"
        models_text += f"\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {WHISPER_MODELS_DIR}"
        
        await message.answer(models_text)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")

@dp.message(Command("queue"))
async def cmd_queue(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    #if user_id not in superusers:
    #    await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á.")
    #queue    return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
    queue_size = audio_service.audio_task_queue.qsize()

    if queue_size == 0 and not audio_service.active_transcriptions:
        await message.answer("üü¢ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏
    queue_info = f"üìã <b>–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:</b>\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    if audio_service.active_transcriptions:
        queue_info += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(audio_service.active_transcriptions)}):</b>\n"
        for user_id, (future, message_id, file_path) in audio_service.active_transcriptions.items():
            if future == "cancelled":
                status = "‚èπ –û—Ç–º–µ–Ω—è–µ—Ç—Å—è"
            else:
                status = "‚ñ∂Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"

            file_name = os.path.basename(file_path)
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024) if os.path.exists(file_path) else 0

            queue_info += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>, {status}\n"
            queue_info += f"  –§–∞–π–ª: {file_name} ({file_size_mb:.2f} –ú–ë)\n"

        queue_info += "\n"

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ —É–¥–∞–ª—è—è –∏—Ö)
    if queue_size > 0:
        queue_info += f"‚è≥ <b>–í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è ({queue_size}):</b>\n"

        # –ù–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–±—Ä–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å, —Å–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        queue_list = []
        unfinished = audio_service.audio_task_queue._unfinished_tasks

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏, —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if unfinished > 0:
            queue_info += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {unfinished}\n"
        else:
            queue_info += "- –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    queue_info += f"\nüñ• <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    queue_info += f"- –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {'–†–∞–±–æ—Ç–∞–µ—Ç' if audio_service.background_worker_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
    queue_info += f"- –†–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤: {audio_service.thread_executor._max_workers}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await message.answer(queue_info, parse_mode="HTML")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ) –¥–ª—è –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π
‚Ä¢ –ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (SRT) —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö
‚Ä¢ –õ–∏–º–∏—Ç: 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
/models - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
/queue - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
‚Ä¢ –†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
"""
    transcribe_mode = "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Whisper" if USE_LOCAL_WHISPER else "OpenAI API"
    await message.answer(help_text % (WHISPER_MODEL, transcribe_mode), parse_mode="HTML")

@dp.message(lambda message: message.text == "üí¨ –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def button_status(message: types.Message):
    await cmd_status(message)

@dp.message(lambda message: message.text == "üé§ –ú–æ–¥–µ–ª–∏ Whisper")
async def button_models(message: types.Message):
    await cmd_models(message)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def button_about(message: types.Message):
    about_text = """
<b>üì± ChatGPT –ë–æ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Whisper.

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ OpenAI ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (SRT) –ø–æ —Ç–∞–π–º–∫–æ–¥–∞–º
‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏
"""
    await message.answer(about_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "üîç –û—á–µ—Ä–µ–¥—å")
async def button_queue(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—á–µ—Ä–µ–¥—å'"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /queue
    await cmd_queue(message)


@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if user_id not in audio_service.active_transcriptions:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.")
        return
    
    future, message_id, file_path = audio_service.active_transcriptions[user_id]
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è (future - —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Future)
    if future != "cancelled" and not isinstance(future, str):
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            audio_service.active_transcriptions[user_id] = ("cancelled", message_id, file_path)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text="‚è± –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                )
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if file_path and os.path.exists(file_path):
                try:
                    cleanup_temp_files(file_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
    else:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
        await message.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–º–µ–Ω—ã.")

@dp.message(lambda message: message.voice or message.audio)
async def handle_audio(message: types.Message):
    await audio_service.handle_audio(message)


@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    if not check_message_limit(user_id):
        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        client = OpenAI(api_key=env_config.get('OPEN_AI_TOKEN'),
                        max_retries=3,
                        timeout=30
                        )
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = client.chat.completions.create(
            model=env_config.get('MODEL'),
            messages=[
                {"role": "user", "content": message.text}
            ]
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = response.choices[0].message.content
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(response_text) > MAX_MESSAGE_LENGTH:
            chunks = audio_service.split_text_into_chunks(response_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(chunks[0])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            for chunk in chunks[1:]:
                await message.answer(chunk)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.edit_text(response_text)
        
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–∞–π–ª
async def save_queue_to_file():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ queue, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        if not os.path.exists(QUEUE_DIR):
            os.makedirs(QUEUE_DIR, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {QUEUE_DIR}")
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue_items = []
        temp_queue = asyncio.Queue()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        active_items = []
        for user_id, (future, message_id, file_path) in audio_service.active_transcriptions.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if future == "cancelled":
                continue
                
            try:
                # –ü–æ—Å–∫–æ–ª—å–∫—É future –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é, 
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if os.path.exists(file_path):
                    serializable_active_item = {
                        "user_id": user_id,
                        "file_path": file_path,
                        "file_name": os.path.basename(file_path),
                        "message_id": message_id,
                        "chat_id": await get_chat_id_by_message_id(message_id, user_id),
                        "timestamp": time.time(),
                        "is_active": True  # –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
                    }
                    active_items.append(serializable_active_item)
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: user_id={user_id}, file={os.path.basename(file_path)}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        queue_size = audio_service.audio_task_queue.qsize()
        if queue_size == 0 and not active_items:
            #logger.debug("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if os.path.exists(QUEUE_SAVE_PATH):
                os.remove(QUEUE_SAVE_PATH)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é: {QUEUE_SAVE_PATH}")
            return
            
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π: {queue_size} –≤ –æ—á–µ—Ä–µ–¥–∏, {len(active_items)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        for _ in range(queue_size):
            try:
                item = audio_service.audio_task_queue.get_nowait()
                
                # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ç–µ–∂
                message, file_path, processing_msg, user_id, file_name = item
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
                if os.path.exists(file_path):
                    serializable_item = {
                        "user_id": user_id,
                        "file_path": file_path,
                        "file_name": file_name,
                        "message_id": processing_msg.message_id,
                        "chat_id": processing_msg.chat.id,
                        "timestamp": time.time(),
                        "is_active": False  # –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
                    }
                    queue_items.append(serializable_item)
                    
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                temp_queue.put_nowait(item)
            except asyncio.QueueEmpty:
                break
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        while not temp_queue.empty():
            audio_service.audio_task_queue.put_nowait(temp_queue.get_nowait())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        all_items = active_items + queue_items
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        if all_items:
            with open(QUEUE_SAVE_PATH, 'w', encoding='utf-8') as f:
                json.dump(all_items, f, ensure_ascii=False, indent=2)
            logger.info(f"–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {QUEUE_SAVE_PATH}, "
                       f"—ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_items)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_items)}, –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue_items)})")
        else:
            logger.info("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if os.path.exists(QUEUE_SAVE_PATH):
                os.remove(QUEUE_SAVE_PATH)
                
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–∞–π–ª: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –ø–æ message_id
async def get_chat_id_by_message_id(message_id, user_id):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –ø–æ message_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    """
    try:
        # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ chat_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å user_id –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return user_id
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ fallback
        return user_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞
async def load_queue_from_file():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞
    """
    try:
        if not os.path.exists(QUEUE_SAVE_PATH):
            logger.info(f"–§–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω: {QUEUE_SAVE_PATH}")
            return 0
            
        with open(QUEUE_SAVE_PATH, 'r', encoding='utf-8') as f:
            saved_items = json.load(f)
            
        if not saved_items:
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
            return 0
            
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(saved_items)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ timestamp (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)
        saved_items.sort(key=lambda x: x.get("timestamp", 0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
        restored_count = 0
        for item in saved_items:
            user_id = item.get("user_id")
            file_path = item.get("file_path")
            file_name = item.get("file_name")
            message_id = item.get("message_id")
            chat_id = item.get("chat_id")
            is_active = item.get("is_active", False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if file_path and os.path.exists(file_path):
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
                    # –ù–∞–º –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
                        chat = types.Chat(id=chat_id, type="private")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        from_user = types.User(
                            id=user_id,
                            is_bot=False,
                            first_name="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                            last_name="",
                            username="restored_user",
                            language_code="ru"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å from_user
                        message = types.Message(
                            message_id=message_id, 
                            chat=chat, 
                            date=int(time.time()),
                            from_user=from_user
                        )
                        
                        # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
                        if is_active:
                            status_text = "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–Ω–æ–≤–æ..."
                        else:
                            status_text = "üîÑ –ó–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å..."
                            
                        try:
                            # –ü—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            processing_msg = await bot.edit_message_text(
                                status_text,
                                chat_id=chat_id,
                                message_id=message_id
                            )
                        except Exception as edit_error:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {edit_error}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ
                            processing_msg = await bot.send_message(
                                chat_id=chat_id,
                                text=f"{status_text}\n(–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"
                            )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
                        await audio_service.audio_task_queue.put((message, file_path, processing_msg, user_id, file_name))
                        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: user_id={user_id}, file={file_name}, –∞–∫—Ç–∏–≤–Ω–æ–µ={is_active}")
                        restored_count += 1
                    except Exception as msg_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {msg_error}")
                        continue
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è {file_name}: {e}")
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {file_path}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã
        if os.path.exists(QUEUE_SAVE_PATH):
            os.remove(QUEUE_SAVE_PATH)
            
        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {restored_count} –∏–∑ {len(saved_items)}")
        return restored_count
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return 0

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
async def periodic_queue_save():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
    """
    while True:
        try:
            await save_queue_to_file()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(60)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def shutdown(signal, loop):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.name}, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
    await save_queue_to_file()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    
    for task in tasks:
        task.cancel()
    
    logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
    await asyncio.gather(*tasks, return_exceptions=True)
    
    loop.stop()
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    
async def register_shutdown_handler():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    try:
        loop = asyncio.get_running_loop()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è SIGINT –∏ SIGTERM
        for sig in [signal.SIGINT, signal.SIGTERM]:
            loop.add_signal_handler(
                sig, lambda s=sig: asyncio.create_task(shutdown(s, loop))
            )
        logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except NotImplementedError:
        # Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_signal_handler
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

async def main():
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    try:
        logger.info(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Whisper: {WHISPER_MODEL}')
        logger.info(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π Whisper: {WHISPER_MODELS_DIR}')
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_temp_files(older_than_hours=24)
        logger.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º Telegram Bot API
        #await check_bot_api_files_access()
        #logger.info('–ü—Ä–æ–≤–µ—Ä–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º Telegram Bot API')
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        restored_count = await load_queue_from_file()
        if restored_count > 0:
            logger.info(f'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∑–∞–¥–∞–Ω–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
        background_task = asyncio.create_task(audio_service.background_audio_processor())
        logger.info('–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        save_task = asyncio.create_task(periodic_queue_save())
        logger.info('–ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏')
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await register_shutdown_handler()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
        await set_commands()
        logger.info('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')

        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏...')
        # –î–∞–µ–º –≤—Ä–µ–º—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
        await asyncio.sleep(1)
    finally:
        await bot.session.close()
        logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except asyncio.CancelledError:
        logger.info('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except Exception:
        logger.exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
