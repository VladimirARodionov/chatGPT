import logging.config
import asyncio
import pathlib
import os
from datetime import datetime

from alembic import command
from alembic.config import Config
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, BotCommand, BotCommandScopeDefault
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from openai import OpenAI
from sqlalchemy.orm import Session
from sqlalchemy import select
from contextlib import contextmanager

from create_bot import db, env_config
from models import UserMessageCount
from audio_utils import transcribe_with_whisper, convert_audio_format, list_downloaded_models

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
alembic_cfg = Config("alembic.ini")
alembic_cfg.attributes['configure_logger'] = False
command.upgrade(alembic_cfg, "head")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig(fname=pathlib.Path(__file__).resolve().parent / 'logging.ini',
                          disable_existing_loggers=False)
logging.getLogger('aiogram.dispatcher').propagate = False
logging.getLogger('aiogram.event').propagate = False

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=env_config.get('TELEGRAM_TOKEN'))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Whisper
WHISPER_MODEL = env_config.get('WHISPER_MODEL', 'base')
USE_LOCAL_WHISPER = env_config.get('USE_LOCAL_WHISPER', 'True').lower() in ('true', '1', 'yes')
WHISPER_MODELS_DIR = env_config.get('WHISPER_MODELS_DIR', 'whisper_models')

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
TEMP_AUDIO_DIR = "temp_audio"
TRANSCRIPTION_DIR = "transcriptions"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(TEMP_AUDIO_DIR, exist_ok=True)
os.makedirs(TRANSCRIPTION_DIR, exist_ok=True)
os.makedirs(WHISPER_MODELS_DIR, exist_ok=True)

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
BOT_COMMANDS = [
    BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"),
    BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
    BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"),
    BotCommand(command="models", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper"),
    BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
]

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    await bot.set_my_commands(BOT_COMMANDS, scope=BotCommandScopeDefault())

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å"),
        types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")
    )
    builder.row(
        types.KeyboardButton(text="üé§ –ú–æ–¥–µ–ª–∏ Whisper"),
        types.KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    )
    return builder.as_markup(resize_keyboard=True)

@contextmanager
def get_db_session():
    """–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏ –ë–î"""
    session = Session(db)
    try:
        yield session
    except Exception as e:
        logger.exception(str(e))
        session.rollback()
    finally:
        session.close()

def check_message_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î"""
    current_date = datetime.now().date()
    
    with get_db_session() as session:
        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(UserMessageCount).where(UserMessageCount.user_id == user_id).order_by(UserMessageCount.date.desc())
        result = session.execute(query).scalars().first()
        
        if result is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            user_count = UserMessageCount(user_id=user_id, count=1, date=current_date)
            session.add(user_count)
            session.commit()
            return True
        
        if result.date != current_date:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            result.count = 1
            result.date = current_date
            session.commit()
            return True
        
        if result.count >= 50:
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        result.count += 1
        session.commit()
        return True

def save_transcription_to_file(text, user_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    
    Args:
        text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{TRANSCRIPTION_DIR}/transcription_{user_id}_{timestamp}.txt"
    
    with open(filename, "w", encoding="utf-8") as file:
        file.write(text)
    
    return filename

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    user_id = message.from_user.id

    with get_db_session() as session:
        query = select(UserMessageCount).where(UserMessageCount.user_id == user_id).order_by(UserMessageCount.date.desc())
        result = session.execute(query).scalars().first()
        
        if result is None or result.date != datetime.now().date():
            await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        else:
            remaining = max(0, 50 - result.count)
            await message.answer(f"–°–µ–≥–æ–¥–Ω—è –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {result.count} —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}.")

@dp.message(Command("models"))
async def cmd_models(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper"""
    try:
        models = list_downloaded_models()
        
        if not models:
            await message.answer("–ù–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Whisper. –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–∫–∞—á–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        models_text = "üìö –°–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ Whisper:\n\n"
        for model in models:
            models_text += f"‚Ä¢ {model['name']} ({model['size_mb']} MB)\n"
        
        models_text += f"\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {WHISPER_MODEL}"
        models_text += f"\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {WHISPER_MODELS_DIR}"
        
        await message.answer(models_text)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>

‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ) –¥–ª—è –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π
‚Ä¢ –õ–∏–º–∏—Ç: 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
/models - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Whisper
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
‚Ä¢ –†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: <code>%s</code>
"""
    transcribe_mode = "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Whisper" if USE_LOCAL_WHISPER else "OpenAI API"
    await message.answer(help_text % (WHISPER_MODEL, transcribe_mode), parse_mode="HTML")

@dp.message(lambda message: message.text == "üí¨ –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def button_status(message: types.Message):
    await cmd_status(message)

@dp.message(lambda message: message.text == "üé§ –ú–æ–¥–µ–ª–∏ Whisper")
async def button_models(message: types.Message):
    await cmd_models(message)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def button_about(message: types.Message):
    about_text = """
<b>üì± ChatGPT –ë–æ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å ChatGPT –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Whisper.

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ OpenAI ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏
"""
    await message.answer(about_text, parse_mode="HTML")

async def download_voice(file, destination):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.download(file, destination=destination)
        return True
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

async def transcribe_audio(file_path, use_local_whisper=USE_LOCAL_WHISPER):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper"""
    try:
        if use_local_whisper:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Whisper –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            converted_file = await convert_audio_format(file_path)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Whisper
            transcription = await transcribe_with_whisper(
                converted_file, 
                model_name=WHISPER_MODEL
            )
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if converted_file != file_path:
                try:
                    os.remove(converted_file)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                
            return transcription
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API
            client = OpenAI(api_key=env_config.get('OPEN_AI_TOKEN'),
                        max_retries=3,
                        timeout=30)
            
            with open(file_path, "rb") as audio_file:
                transcription = client.audio.transcriptions.create(
                    model="whisper-1", 
                    file=audio_file
                )
            return transcription.text
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        raise

@dp.message(lambda message: message.voice or message.audio)
async def handle_audio(message: types.Message):
    user_id = message.from_user.id

    if not USE_LOCAL_WHISPER and not check_message_limit(user_id):
        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞ —Ñ–∞–π–ª –ø—Ä–∏—à–µ–ª
        file_id = message.voice.file_id if message.voice else message.audio.file_id
        
        # –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_name = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        if message.audio and message.audio.file_name:
            file_name = message.audio.file_name
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        file_path = f"{TEMP_AUDIO_DIR}/audio_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.ogg"
        file = await bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await processing_msg.edit_text("–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
        if not await download_voice(file, file_path):
            await processing_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            return
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        await processing_msg.edit_text(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ {'—Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Whisper' if USE_LOCAL_WHISPER else '—á–µ—Ä–µ–∑ OpenAI API'}...")
        transcription = await transcribe_audio(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
        transcript_file_path = save_transcription_to_file(transcription, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ: {file_name}\n\n"
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_text = transcription[:1000] + "..." if len(transcription) > 1000 else transcription
        message_text += preview_text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(message_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π
        await message.answer_document(
            FSInputFile(transcript_file_path),
            caption="–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(file_path)
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∂–µ
            # os.remove(transcript_file_path)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
    except Exception as e:
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    if not check_message_limit(user_id):
        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 50 —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        client = OpenAI(api_key=env_config.get('OPEN_AI_TOKEN'),
                        max_retries=3,
                        timeout=30
                        )
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = client.chat.completions.create(
            model=env_config.get('MODEL'),
            messages=[
                {"role": "user", "content": message.text}
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await processing_msg.edit_text(response.choices[0].message.content)
        
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def main():
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
    try:
        logger.info(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å Whisper: {WHISPER_MODEL}')
        logger.info(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π Whisper: {WHISPER_MODELS_DIR}')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
        await set_commands()
        logger.info('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        pass
    finally:
        await bot.session.close()
        logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except asyncio.CancelledError:
        logger.info('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ')
    except Exception:
        logger.exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
