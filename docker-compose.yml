name: ${COMPOSE_PROJECT_NAME}
services:
  postgres:
    build:
      dockerfile: Dockerfile_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - WEBDAV_LOGIN=${WEBDAV_LOGIN}
      - WEBDAV_PASSWORD=${WEBDAV_PASSWORD}
      - WEBDAV_URL=${WEBDAV_URL}
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - TZ=${TZ}
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  telegram-bot-api:
    build:
      context: .
      dockerfile: Dockerfile_api
    ports:
      - "${API_PORT:-8082}:8082"
    environment:
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - API_PORT=8082
      - TZ=${TZ}
    volumes:
      - telegram_bot_api_data:/var/lib/telegram-bot-api
      - ./logs/telegram-bot-api:/var/log/telegram-bot-api
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  chatgptapp:
    build:
      dockerfile: Dockerfile_app
    user: app
    env_file:
      - .env
    environment:
      - TZ=${TZ}
      - LOCAL_BOT_API=${LOCAL_BOT_API}
    volumes:
      - app_logs:/app/logs
      - app_temp_audio:/app/temp_audio
      - app_transcriptions:/app/transcriptions
      - app_whisper_models:/app/whisper_models
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      telegram-bot-api:
        condition: service_healthy

volumes:
  postgres_data:
  telegram_bot_api_data:
  app_logs:
  app_temp_audio:
  app_transcriptions:
  app_whisper_models: